
































extensions are an example of feature designed for markdown first
so models leak into native from that direction
and the design of a new syntax
the development of pandoc often stems from markdown users

so this is something worth deepening
and it tries to render something that is not in the reader
it accesses options
i'm a bit baffled by the logic the template uses
in `pandoc-to-sphinx` i could use this
a table of contents is added by the default template
https://github.com/jgm/pandoc-templates/blob/master/default.rst



rilevante da esplorare per adesso
fatta di pareti dure e vie tortuose
chi sa trovarsi ad agio in una miniera

growing complexity as a feature of successful sourcing

a pandoc knowledge base could contain info about caption formats

that feature affects a small percentage of users
and a method
wouldn't we like to have a shared perspective on the horizon?
before diving into tasks

that's why openin the decision process is worth its cost

and its bottlenecks
we don't know the adoption we are going to support

so some formalization is needed
but the artifacts include the possibility of being handed over
of course it can be leaner
it feels odd to grow a process for a single dev

che è la cosa più importante che abbiamo
cioè della nostra efficace collaborazione
sono l'ossatura della nostra comunicazione interna
ma più accessibili
con un'usabilità inferiore ad altre tecnologie
sembra inefficiente perchè sono web app
sembra strano passare tempo scrivendo fra trello ed altre piattaforme web

"i put it here, in front of everyone"

effective work is more enjoyable